<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dev.security.tests.dao.UserDao">
    <resultMap id="BaseResultMap" type="com.dev.security.tests.entity.User">
        <!--@mbg.generated-->
        <!--@Table tb_user-->
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <result column="create_by" property="createBy"/>
        <result column="create_time" property="createTime"/>
        <result column="update_by" property="updateBy"/>
        <result column="update_time" property="updateTime"/>
        <result column="delete_flag" property="deleteFlag"/>
    </resultMap>
    <resultMap id="UserInfoVOMap" type="com.dev.security.tests.vo.UserInfoVO">
        <id column="user_id" property="id"/>
        <result column="username" property="username"/>
        <result column="password" property="password"/>
        <collection property="roles" ofType="com.dev.security.tests.vo.RoleVO">
            <id column="role_id" property="id"/>
            <result column="role_name" property="roleName"/>
            <collection property="permissions" ofType="java.lang.String">
                <result column="permission"/>
            </collection>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        <!--@mbg.generated-->
        id,
        username,
        `password`,
        create_by,
        create_time,
        update_by,
        update_time,
        delete_flag
    </sql>

    <select id="selectByUsername" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where username = #{username}
          and delete_flag = 0
    </select>

    <select id="selectUserInfoById" resultMap="UserInfoVOMap">
        select u.id         as user_id,
               u.username   as username,
               u.password   as password,
               r.id         as role_id,
               r.role_name  as role_name,
               m.permission as permission
        from tb_user u
                 left join tb_user_role ur on ur.user_id = u.id and ur.delete_flag = 0
                 left join tb_role r on r.id = ur.role_id and r.delete_flag = 0
                 left join tb_role_menu rm on rm.role_id = r.id and rm.delete_flag = 0
                 left join tb_menu m on m.id = rm.menu_id and m.delete_flag = 0
        where u.id = #{id}
          and u.delete_flag = 0
    </select>

    <select id="listUserInfo" resultMap="UserInfoVOMap">
        select u.id         as user_id,
               u.username   as username,
               u.password   as password,
               r.id         as role_id,
               r.role_name  as role_name,
               m.permission as permission
        from tb_user u
                 left join tb_user_role ur on ur.user_id = u.id and ur.delete_flag = 0
                 left join tb_role r on r.id = ur.role_id and r.delete_flag = 0
                 left join tb_role_menu rm on rm.role_id = r.id and rm.delete_flag = 0
                 left join tb_menu m on m.id = rm.menu_id and m.delete_flag = 0
        where u.delete_flag = 0
        <if test="condition.id != null and condition.id != ''">
            and u.id = #{condition.id}
        </if>
        <if test="condition.username != null and condition.username != ''">
            and u.username = #{condition.username}
        </if>
    </select>

    <select id="selectById" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from tb_user
        where id = #{id}
          and delete_flag = 0
    </select>

    <insert id="insert">
        INSERT INTO tb_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            id,
            username,
            `password`,
            <if test="createBy != null">
                create_by,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            delete_flag
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{id},
            #{username},
            #{password},
            <if test="createBy != null">
                #{createBy},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="updateBy != null">
                #{updateBy},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
            #{deleteFlag}
        </trim>
    </insert>

    <update id="updateById">
        update tb_user
        <set>
            <if test="updated.username != null">
                username = #{updated.username},
            </if>
            <if test="updated.password != null">
                password = #{updated.password},
            </if>
            <if test="updated.createBy != null">
                create_by = #{updated.createBy},
            </if>
            <if test="updated.createTime != null">
                create_time = #{updated.createTime},
            </if>
            <if test="updated.updateBy != null">
                update_by = #{updated.updateBy},
            </if>
            <if test="updated.updateTime != null">
                update_time = #{updated.updateTime},
            </if>
        </set>
        where id = #{id}
          and delete_flag = 0
    </update>

    <delete id="deleteById">
        update tb_user
        set delete_flag = 1
        where id = #{id}
    </delete>
</mapper>